(()=>{"use strict";function t(){}function n(n){return null==n?t:function(){return this.querySelector(n)}}function e(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function r(){return[]}function i(t){return null==t?r:function(){return this.querySelectorAll(t)}}function a(t){return function(){return this.matches(t)}}function o(t){return function(n){return n.matches(t)}}var u=Array.prototype.find;function s(){return this.firstElementChild}var l=Array.prototype.filter;function c(){return this.children}function h(t){return new Array(t.length)}function f(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}function d(t,n,e,r,i,a){for(var o,u=0,s=n.length,l=a.length;u<l;++u)(o=n[u])?(o.__data__=a[u],r[u]=o):e[u]=new f(t,a[u]);for(;u<s;++u)(o=n[u])&&(i[u]=o)}function p(t,n,e,r,i,a,o){var u,s,l,c=new Map,h=n.length,d=a.length,p=new Array(h);for(u=0;u<h;++u)(s=n[u])&&(p[u]=l=o.call(s,s.__data__,u,n)+"",c.has(l)?i[u]=s:c.set(l,s));for(u=0;u<d;++u)l=o.call(t,a[u],u,a)+"",(s=c.get(l))?(r[u]=s,s.__data__=a[u],c.delete(l)):e[u]=new f(t,a[u]);for(u=0;u<h;++u)(s=n[u])&&c.get(p[u])===s&&(i[u]=s)}function _(t){return t.__data__}function y(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}f.prototype={constructor:f,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var g="http://www.w3.org/1999/xhtml";const m={svg:"http://www.w3.org/2000/svg",xhtml:g,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function v(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),m.hasOwnProperty(n)?{space:m[n],local:t}:t}function w(t){return function(){this.removeAttribute(t)}}function x(t){return function(){this.removeAttributeNS(t.space,t.local)}}function b(t,n){return function(){this.setAttribute(t,n)}}function M(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function A(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function k(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}function N(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function E(t){return function(){this.style.removeProperty(t)}}function S(t,n,e){return function(){this.style.setProperty(t,n,e)}}function P(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function T(t,n){return t.style.getPropertyValue(n)||N(t).getComputedStyle(t,null).getPropertyValue(n)}function R(t){return function(){delete this[t]}}function C(t,n){return function(){this[t]=n}}function I(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function z(t){return t.trim().split(/^|\s+/)}function X(t){return t.classList||new q(t)}function q(t){this._node=t,this._names=z(t.getAttribute("class")||"")}function L(t,n){for(var e=X(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function O(t,n){for(var e=X(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function Y(t){return function(){L(this,t)}}function j(t){return function(){O(this,t)}}function D(t,n){return function(){(n.apply(this,arguments)?L:O)(this,t)}}function B(){this.textContent=""}function F(t){return function(){this.textContent=t}}function H(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function V(){this.innerHTML=""}function U(t){return function(){this.innerHTML=t}}function G(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function Z(){this.nextSibling&&this.parentNode.appendChild(this)}function J(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function K(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===g&&n.documentElement.namespaceURI===g?n.createElement(t):n.createElementNS(e,t)}}function Q(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function W(t){var n=v(t);return(n.local?Q:K)(n)}function tt(){return null}function nt(){var t=this.parentNode;t&&t.removeChild(this)}function et(){var t=this.cloneNode(!1),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function rt(){var t=this.cloneNode(!0),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function it(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,a=n.length;r<a;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.options);++i?n.length=i:delete this.__on}}}function at(t,n,e){return function(){var r,i=this.__on,a=function(t){return function(n){t.call(this,n,this.__data__)}}(n);if(i)for(var o=0,u=i.length;o<u;++o)if((r=i[o]).type===t.type&&r.name===t.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=a,r.options=e),void(r.value=n);this.addEventListener(t.type,a,e),r={type:t.type,name:t.name,value:n,listener:a,options:e},i?i.push(r):this.__on=[r]}}function ot(t,n,e){var r=N(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function ut(t,n){return function(){return ot(this,t,n)}}function st(t,n){return function(){return ot(this,t,n.apply(this,arguments))}}q.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var lt=[null];function ct(t,n){this._groups=t,this._parents=n}function ht(){return new ct([[document.documentElement]],lt)}ct.prototype=ht.prototype={constructor:ct,select:function(t){"function"!=typeof t&&(t=n(t));for(var e=this._groups,r=e.length,i=new Array(r),a=0;a<r;++a)for(var o,u,s=e[a],l=s.length,c=i[a]=new Array(l),h=0;h<l;++h)(o=s[h])&&(u=t.call(o,o.__data__,h,s))&&("__data__"in o&&(u.__data__=o.__data__),c[h]=u);return new ct(i,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);return null==n?[]:e(n)}}(t):i(t);for(var n=this._groups,r=n.length,a=[],o=[],u=0;u<r;++u)for(var s,l=n[u],c=l.length,h=0;h<c;++h)(s=l[h])&&(a.push(t.call(s,s.__data__,h,l)),o.push(s));return new ct(a,o)},selectChild:function(t){return this.select(null==t?s:function(t){return function(){return u.call(this.children,t)}}("function"==typeof t?t:o(t)))},selectChildren:function(t){return this.selectAll(null==t?c:function(t){return function(){return l.call(this.children,t)}}("function"==typeof t?t:o(t)))},filter:function(t){"function"!=typeof t&&(t=a(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],s=u.length,l=r[i]=[],c=0;c<s;++c)(o=u[c])&&t.call(o,o.__data__,c,u)&&l.push(o);return new ct(r,this._parents)},data:function(t,n){if(!arguments.length)return Array.from(this,_);var r,i=n?p:d,a=this._parents,o=this._groups;"function"!=typeof t&&(r=t,t=function(){return r});for(var u=o.length,s=new Array(u),l=new Array(u),c=new Array(u),h=0;h<u;++h){var f=a[h],y=o[h],g=y.length,m=e(t.call(f,f&&f.__data__,h,a)),v=m.length,w=l[h]=new Array(v),x=s[h]=new Array(v);i(f,y,w,x,c[h]=new Array(g),m,n);for(var b,M,A=0,k=0;A<v;++A)if(b=w[A]){for(A>=k&&(k=A+1);!(M=x[k])&&++k<v;);b._next=M||null}}return(s=new ct(s,a))._enter=l,s._exit=c,s},enter:function(){return new ct(this._enter||this._groups.map(h),this._parents)},exit:function(){return new ct(this._exit||this._groups.map(h),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,a=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=n&&(i=n(i)),null==e?a.remove():e(a),r&&i?r.merge(i).order():i},merge:function(t){if(!(t instanceof ct))throw new Error("invalid merge");for(var n=this._groups,e=t._groups,r=n.length,i=e.length,a=Math.min(r,i),o=new Array(r),u=0;u<a;++u)for(var s,l=n[u],c=e[u],h=l.length,f=o[u]=new Array(h),d=0;d<h;++d)(s=l[d]||c[d])&&(f[d]=s);for(;u<r;++u)o[u]=n[u];return new ct(o,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],a=i.length-1,o=i[a];--a>=0;)(r=i[a])&&(o&&4^r.compareDocumentPosition(o)&&o.parentNode.insertBefore(r,o),o=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=y);for(var e=this._groups,r=e.length,i=new Array(r),a=0;a<r;++a){for(var o,u=e[a],s=u.length,l=i[a]=new Array(s),c=0;c<s;++c)(o=u[c])&&(l[c]=o);l.sort(n)}return new ct(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,a=r.length;i<a;++i){var o=r[i];if(o)return o}return null},size:function(){let t=0;for(const n of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,a=n[e],o=0,u=a.length;o<u;++o)(i=a[o])&&t.call(i,i.__data__,o,a);return this},attr:function(t,n){var e=v(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?x:w:"function"==typeof n?e.local?k:A:e.local?M:b)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?E:"function"==typeof n?P:S)(t,n,null==e?"":e)):T(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?R:"function"==typeof n?I:C)(t,n)):this.node()[t]},classed:function(t,n){var e=z(t+"");if(arguments.length<2){for(var r=X(this.node()),i=-1,a=e.length;++i<a;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?D:n?Y:j)(e,n))},text:function(t){return arguments.length?this.each(null==t?B:("function"==typeof t?H:F)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?V:("function"==typeof t?G:U)(t)):this.node().innerHTML},raise:function(){return this.each(Z)},lower:function(){return this.each(J)},append:function(t){var n="function"==typeof t?t:W(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,e){var r="function"==typeof t?t:W(t),i=null==e?tt:"function"==typeof e?e:n(e);return this.select((function(){return this.insertBefore(r.apply(this,arguments),i.apply(this,arguments)||null)}))},remove:function(){return this.each(nt)},clone:function(t){return this.select(t?rt:et)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,a=function(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}(t+""),o=a.length;if(!(arguments.length<2)){for(u=n?at:it,r=0;r<o;++r)this.each(u(a[r],n,e));return this}var u=this.node().__on;if(u)for(var s,l=0,c=u.length;l<c;++l)for(r=0,s=u[l];r<o;++r)if((i=a[r]).type===s.type&&i.name===s.name)return s.value},dispatch:function(t,n){return this.each(("function"==typeof n?st:ut)(t,n))},[Symbol.iterator]:function*(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r,i=t[n],a=0,o=i.length;a<o;++a)(r=i[a])&&(yield r)}};const ft=ht;var dt={value:()=>{}};function pt(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new _t(r)}function _t(t){this._=t}function yt(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function gt(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=dt,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}_t.prototype=pt.prototype={constructor:_t,on:function(t,n){var e,r,i=this._,a=(r=i,(t+"").trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");if(e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))),o=-1,u=a.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<u;)if(e=(t=a[o]).type)i[e]=gt(i[e],t.name,n);else if(null==n)for(e in i)i[e]=gt(i[e],t.name,null);return this}for(;++o<u;)if((e=(t=a[o]).type)&&(e=yt(i[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new _t(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),a=0;a<e;++a)i[a]=arguments[a+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(a=0,e=(r=this._[t]).length;a<e;++a)r[a].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,a=r.length;i<a;++i)r[i].value.apply(n,e)}};const mt=pt;var vt,wt,xt=0,bt=0,Mt=0,At=1e3,kt=0,Nt=0,Et=0,St="object"==typeof performance&&performance.now?performance:Date,$t="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Pt(){return Nt||($t(Tt),Nt=St.now()+Et)}function Tt(){Nt=0}function Rt(){this._call=this._time=this._next=null}function Ct(t,n,e){var r=new Rt;return r.restart(t,n,e),r}function It(){Nt=(kt=St.now())+Et,xt=bt=0;try{!function(){Pt(),++xt;for(var t,n=vt;n;)(t=Nt-n._time)>=0&&n._call.call(null,t),n=n._next;--xt}()}finally{xt=0,function(){for(var t,n,e=vt,r=1/0;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:vt=n);wt=t,Xt(r)}(),Nt=0}}function zt(){var t=St.now(),n=t-kt;n>At&&(Et-=n,kt=t)}function Xt(t){xt||(bt&&(bt=clearTimeout(bt)),t-Nt>24?(t<1/0&&(bt=setTimeout(It,t-St.now()-Et)),Mt&&(Mt=clearInterval(Mt))):(Mt||(kt=St.now(),Mt=setInterval(zt,At)),xt=1,$t(It)))}function qt(t,n,e){var r=new Rt;return n=null==n?0:+n,r.restart((e=>{r.stop(),t(e+n)}),n,e),r}Rt.prototype=Ct.prototype={constructor:Rt,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Pt():+e)+(null==n?0:+n),this._next||wt===this||(wt?wt._next=this:vt=this,wt=this),this._call=t,this._time=e,Xt()},stop:function(){this._call&&(this._call=null,this._time=1/0,Xt())}};var Lt=mt("start","end","cancel","interrupt"),Ot=[],Yt=0,jt=1,Dt=2,Bt=3,Ft=4,Ht=5,Vt=6;function Ut(t,n,e,r,i,a){var o=t.__transition;if(o){if(e in o)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function a(s){var l,c,h,f;if(e.state!==jt)return u();for(l in i)if((f=i[l]).name===e.name){if(f.state===Bt)return qt(a);f.state===Ft?(f.state=Vt,f.timer.stop(),f.on.call("interrupt",t,t.__data__,f.index,f.group),delete i[l]):+l<n&&(f.state=Vt,f.timer.stop(),f.on.call("cancel",t,t.__data__,f.index,f.group),delete i[l])}if(qt((function(){e.state===Bt&&(e.state=Ft,e.timer.restart(o,e.delay,e.time),o(s))})),e.state=Dt,e.on.call("start",t,t.__data__,e.index,e.group),e.state===Dt){for(e.state=Bt,r=new Array(h=e.tween.length),l=0,c=-1;l<h;++l)(f=e.tween[l].value.call(t,t.__data__,e.index,e.group))&&(r[++c]=f);r.length=c+1}}function o(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(u),e.state=Ht,1),a=-1,o=r.length;++a<o;)r[a].call(t,i);e.state===Ht&&(e.on.call("end",t,t.__data__,e.index,e.group),u())}function u(){for(var r in e.state=Vt,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=Ct((function(t){e.state=jt,e.timer.restart(a,e.delay,e.time),e.delay<=t&&a(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:Lt,tween:Ot,time:a.time,delay:a.delay,duration:a.duration,ease:a.ease,timer:null,state:Yt})}function Gt(t,n){var e=Jt(t,n);if(e.state>Yt)throw new Error("too late; already scheduled");return e}function Zt(t,n){var e=Jt(t,n);if(e.state>Bt)throw new Error("too late; already running");return e}function Jt(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}function Kt(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}}var Qt,Wt=180/Math.PI,tn={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function nn(t,n,e,r,i,a){var o,u,s;return(o=Math.sqrt(t*t+n*n))&&(t/=o,n/=o),(s=t*e+n*r)&&(e-=t*s,r-=n*s),(u=Math.sqrt(e*e+r*r))&&(e/=u,r/=u,s/=u),t*r<n*e&&(t=-t,n=-n,s=-s,o=-o),{translateX:i,translateY:a,rotate:Math.atan2(n,t)*Wt,skewX:Math.atan(s)*Wt,scaleX:o,scaleY:u}}function en(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(a,o){var u=[],s=[];return a=t(a),o=t(o),function(t,r,i,a,o,u){if(t!==i||r!==a){var s=o.push("translate(",null,n,null,e);u.push({i:s-4,x:Kt(t,i)},{i:s-2,x:Kt(r,a)})}else(i||a)&&o.push("translate("+i+n+a+e)}(a.translateX,a.translateY,o.translateX,o.translateY,u,s),function(t,n,e,a){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),a.push({i:e.push(i(e)+"rotate(",null,r)-2,x:Kt(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(a.rotate,o.rotate,u,s),function(t,n,e,a){t!==n?a.push({i:e.push(i(e)+"skewX(",null,r)-2,x:Kt(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(a.skewX,o.skewX,u,s),function(t,n,e,r,a,o){if(t!==e||n!==r){var u=a.push(i(a)+"scale(",null,",",null,")");o.push({i:u-4,x:Kt(t,e)},{i:u-2,x:Kt(n,r)})}else 1===e&&1===r||a.push(i(a)+"scale("+e+","+r+")")}(a.scaleX,a.scaleY,o.scaleX,o.scaleY,u,s),a=o=null,function(t){for(var n,e=-1,r=s.length;++e<r;)u[(n=s[e]).i]=n.x(t);return u.join("")}}}var rn=en((function(t){const n=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return n.isIdentity?tn:nn(n.a,n.b,n.c,n.d,n.e,n.f)}),"px, ","px)","deg)"),an=en((function(t){return null==t?tn:(Qt||(Qt=document.createElementNS("http://www.w3.org/2000/svg","g")),Qt.setAttribute("transform",t),(t=Qt.transform.baseVal.consolidate())?nn((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):tn)}),", ",")",")");function on(t,n){var e,r;return function(){var i=Zt(this,t),a=i.tween;if(a!==e)for(var o=0,u=(r=e=a).length;o<u;++o)if(r[o].name===n){(r=r.slice()).splice(o,1);break}i.tween=r}}function un(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var a=Zt(this,t),o=a.tween;if(o!==r){i=(r=o).slice();for(var u={name:n,value:e},s=0,l=i.length;s<l;++s)if(i[s].name===n){i[s]=u;break}s===l&&i.push(u)}a.tween=i}}function sn(t,n,e){var r=t._id;return t.each((function(){var t=Zt(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return Jt(t,r).value[n]}}function ln(t,n,e){t.prototype=n.prototype=e,e.constructor=t}function cn(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function hn(){}var fn=.7,dn=1/fn,pn="\\s*([+-]?\\d+)\\s*",_n="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",yn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",gn=/^#([0-9a-f]{3,8})$/,mn=new RegExp("^rgb\\("+[pn,pn,pn]+"\\)$"),vn=new RegExp("^rgb\\("+[yn,yn,yn]+"\\)$"),wn=new RegExp("^rgba\\("+[pn,pn,pn,_n]+"\\)$"),xn=new RegExp("^rgba\\("+[yn,yn,yn,_n]+"\\)$"),bn=new RegExp("^hsl\\("+[_n,yn,yn]+"\\)$"),Mn=new RegExp("^hsla\\("+[_n,yn,yn,_n]+"\\)$"),An={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function kn(){return this.rgb().formatHex()}function Nn(){return this.rgb().formatRgb()}function En(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=gn.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?Sn(n):3===e?new Tn(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?$n(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?$n(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=mn.exec(t))?new Tn(n[1],n[2],n[3],1):(n=vn.exec(t))?new Tn(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=wn.exec(t))?$n(n[1],n[2],n[3],n[4]):(n=xn.exec(t))?$n(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=bn.exec(t))?zn(n[1],n[2]/100,n[3]/100,1):(n=Mn.exec(t))?zn(n[1],n[2]/100,n[3]/100,n[4]):An.hasOwnProperty(t)?Sn(An[t]):"transparent"===t?new Tn(NaN,NaN,NaN,0):null}function Sn(t){return new Tn(t>>16&255,t>>8&255,255&t,1)}function $n(t,n,e,r){return r<=0&&(t=n=e=NaN),new Tn(t,n,e,r)}function Pn(t,n,e,r){return 1===arguments.length?((i=t)instanceof hn||(i=En(i)),i?new Tn((i=i.rgb()).r,i.g,i.b,i.opacity):new Tn):new Tn(t,n,e,null==r?1:r);var i}function Tn(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function Rn(){return"#"+In(this.r)+In(this.g)+In(this.b)}function Cn(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function In(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function zn(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new qn(t,n,e,r)}function Xn(t){if(t instanceof qn)return new qn(t.h,t.s,t.l,t.opacity);if(t instanceof hn||(t=En(t)),!t)return new qn;if(t instanceof qn)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),a=Math.max(n,e,r),o=NaN,u=a-i,s=(a+i)/2;return u?(o=n===a?(e-r)/u+6*(e<r):e===a?(r-n)/u+2:(n-e)/u+4,u/=s<.5?a+i:2-a-i,o*=60):u=s>0&&s<1?0:o,new qn(o,u,s,t.opacity)}function qn(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Ln(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function On(t,n,e,r,i){var a=t*t,o=a*t;return((1-3*t+3*a-o)*n+(4-6*a+3*o)*e+(1+3*t+3*a-3*o)*r+o*i)/6}ln(hn,En,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:kn,formatHex:kn,formatHsl:function(){return Xn(this).formatHsl()},formatRgb:Nn,toString:Nn}),ln(Tn,Pn,cn(hn,{brighter:function(t){return t=null==t?dn:Math.pow(dn,t),new Tn(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?fn:Math.pow(fn,t),new Tn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Rn,formatHex:Rn,formatRgb:Cn,toString:Cn})),ln(qn,(function(t,n,e,r){return 1===arguments.length?Xn(t):new qn(t,n,e,null==r?1:r)}),cn(hn,{brighter:function(t){return t=null==t?dn:Math.pow(dn,t),new qn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?fn:Math.pow(fn,t),new qn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new Tn(Ln(t>=240?t-240:t+120,i,r),Ln(t,i,r),Ln(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));const Yn=t=>()=>t;function jn(t,n){var e=n-t;return e?function(t,n){return function(e){return t+e*n}}(t,e):Yn(isNaN(t)?n:t)}const Dn=function t(n){var e=function(t){return 1==(t=+t)?jn:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):Yn(isNaN(n)?e:n)}}(n);function r(t,n){var r=e((t=Pn(t)).r,(n=Pn(n)).r),i=e(t.g,n.g),a=e(t.b,n.b),o=jn(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=a(n),t.opacity=o(n),t+""}}return r.gamma=t,r}(1);function Bn(t){return function(n){var e,r,i=n.length,a=new Array(i),o=new Array(i),u=new Array(i);for(e=0;e<i;++e)r=Pn(n[e]),a[e]=r.r||0,o[e]=r.g||0,u[e]=r.b||0;return a=t(a),o=t(o),u=t(u),r.opacity=1,function(t){return r.r=a(t),r.g=o(t),r.b=u(t),r+""}}}Bn((function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],a=t[r+1],o=r>0?t[r-1]:2*i-a,u=r<n-1?t[r+2]:2*a-i;return On((e-r/n)*n,o,i,a,u)}})),Bn((function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],a=t[r%n],o=t[(r+1)%n],u=t[(r+2)%n];return On((e-r/n)*n,i,a,o,u)}}));var Fn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Hn=new RegExp(Fn.source,"g");function Vn(t,n){var e,r,i,a=Fn.lastIndex=Hn.lastIndex=0,o=-1,u=[],s=[];for(t+="",n+="";(e=Fn.exec(t))&&(r=Hn.exec(n));)(i=r.index)>a&&(i=n.slice(a,i),u[o]?u[o]+=i:u[++o]=i),(e=e[0])===(r=r[0])?u[o]?u[o]+=r:u[++o]=r:(u[++o]=null,s.push({i:o,x:Kt(e,r)})),a=Hn.lastIndex;return a<n.length&&(i=n.slice(a),u[o]?u[o]+=i:u[++o]=i),u.length<2?s[0]?function(t){return function(n){return t(n)+""}}(s[0].x):function(t){return function(){return t}}(n):(n=s.length,function(t){for(var e,r=0;r<n;++r)u[(e=s[r]).i]=e.x(t);return u.join("")})}function Un(t,n){var e;return("number"==typeof n?Kt:n instanceof En?Dn:(e=En(n))?(n=e,Dn):Vn)(t,n)}function Gn(t){return function(){this.removeAttribute(t)}}function Zn(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Jn(t,n,e){var r,i,a=e+"";return function(){var o=this.getAttribute(t);return o===a?null:o===r?i:i=n(r=o,e)}}function Kn(t,n,e){var r,i,a=e+"";return function(){var o=this.getAttributeNS(t.space,t.local);return o===a?null:o===r?i:i=n(r=o,e)}}function Qn(t,n,e){var r,i,a;return function(){var o,u,s=e(this);if(null!=s)return(o=this.getAttribute(t))===(u=s+"")?null:o===r&&u===i?a:(i=u,a=n(r=o,s));this.removeAttribute(t)}}function Wn(t,n,e){var r,i,a;return function(){var o,u,s=e(this);if(null!=s)return(o=this.getAttributeNS(t.space,t.local))===(u=s+"")?null:o===r&&u===i?a:(i=u,a=n(r=o,s));this.removeAttributeNS(t.space,t.local)}}function te(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&function(t,n){return function(e){this.setAttributeNS(t.space,t.local,n.call(this,e))}}(t,i)),e}return i._value=n,i}function ne(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&function(t,n){return function(e){this.setAttribute(t,n.call(this,e))}}(t,i)),e}return i._value=n,i}function ee(t,n){return function(){Gt(this,t).delay=+n.apply(this,arguments)}}function re(t,n){return n=+n,function(){Gt(this,t).delay=n}}function ie(t,n){return function(){Zt(this,t).duration=+n.apply(this,arguments)}}function ae(t,n){return n=+n,function(){Zt(this,t).duration=n}}var oe=ft.prototype.constructor;function ue(t){return function(){this.style.removeProperty(t)}}var se=0;function le(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function ce(t){return ft().transition(t)}function he(){return++se}var fe=ft.prototype;le.prototype=ce.prototype={constructor:le,select:function(t){var e=this._name,r=this._id;"function"!=typeof t&&(t=n(t));for(var i=this._groups,a=i.length,o=new Array(a),u=0;u<a;++u)for(var s,l,c=i[u],h=c.length,f=o[u]=new Array(h),d=0;d<h;++d)(s=c[d])&&(l=t.call(s,s.__data__,d,c))&&("__data__"in s&&(l.__data__=s.__data__),f[d]=l,Ut(f[d],e,r,d,f,Jt(s,r)));return new le(o,this._parents,e,r)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=i(t));for(var r=this._groups,a=r.length,o=[],u=[],s=0;s<a;++s)for(var l,c=r[s],h=c.length,f=0;f<h;++f)if(l=c[f]){for(var d,p=t.call(l,l.__data__,f,c),_=Jt(l,e),y=0,g=p.length;y<g;++y)(d=p[y])&&Ut(d,n,e,y,p,_);o.push(p),u.push(l)}return new le(o,u,n,e)},filter:function(t){"function"!=typeof t&&(t=a(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],s=u.length,l=r[i]=[],c=0;c<s;++c)(o=u[c])&&t.call(o,o.__data__,c,u)&&l.push(o);return new le(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,a=Math.min(r,i),o=new Array(r),u=0;u<a;++u)for(var s,l=n[u],c=e[u],h=l.length,f=o[u]=new Array(h),d=0;d<h;++d)(s=l[d]||c[d])&&(f[d]=s);for(;u<r;++u)o[u]=n[u];return new le(o,this._parents,this._name,this._id)},selection:function(){return new oe(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=he(),r=this._groups,i=r.length,a=0;a<i;++a)for(var o,u=r[a],s=u.length,l=0;l<s;++l)if(o=u[l]){var c=Jt(o,n);Ut(o,t,e,l,u,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new le(r,this._parents,t,e)},call:fe.call,nodes:fe.nodes,node:fe.node,size:fe.size,empty:fe.empty,each:fe.each,on:function(t,n){var e=this._id;return arguments.length<2?Jt(this.node(),e).on.on(t):this.each(function(t,n,e){var r,i,a=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?Gt:Zt;return function(){var o=a(this,t),u=o.on;u!==r&&(i=(r=u).copy()).on(n,e),o.on=i}}(e,t,n))},attr:function(t,n){var e=v(t),r="transform"===e?an:Un;return this.attrTween(t,"function"==typeof n?(e.local?Wn:Qn)(e,r,sn(this,"attr."+t,n)):null==n?(e.local?Zn:Gn)(e):(e.local?Kn:Jn)(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=v(t);return this.tween(e,(r.local?te:ne)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?rn:Un;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var a=T(this,t),o=(this.style.removeProperty(t),T(this,t));return a===o?null:a===e&&o===r?i:i=n(e=a,r=o)}}(t,r)).on("end.style."+t,ue(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,a;return function(){var o=T(this,t),u=e(this),s=u+"";return null==u&&(this.style.removeProperty(t),s=u=T(this,t)),o===s?null:o===r&&s===i?a:(i=s,a=n(r=o,u))}}(t,r,sn(this,"style."+t,n))).each(function(t,n){var e,r,i,a,o="style."+n,u="end."+o;return function(){var s=Zt(this,t),l=s.on,c=null==s.value[o]?a||(a=ue(n)):void 0;l===e&&i===c||(r=(e=l).copy()).on(u,i=c),s.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,a=e+"";return function(){var o=T(this,t);return o===a?null:o===r?i:i=n(r=o,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,function(t,n,e){var r,i;function a(){var a=n.apply(this,arguments);return a!==i&&(r=(i=a)&&function(t,n,e){return function(r){this.style.setProperty(t,n.call(this,r),e)}}(t,a,e)),r}return a._value=n,a}(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(sn(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var n="text";if(arguments.length<1)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;return this.tween(n,function(t){var n,e;function r(){var r=t.apply(this,arguments);return r!==e&&(n=(e=r)&&function(t){return function(n){this.textContent=t.call(this,n)}}(r)),n}return r._value=t,r}(t))},remove:function(){return this.on("end.remove",function(t){return function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}}(this._id))},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=Jt(this.node(),e).tween,a=0,o=i.length;a<o;++a)if((r=i[a]).name===t)return r.value;return null}return this.each((null==n?on:un)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?ee:re)(n,t)):Jt(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?ie:ae)(n,t)):Jt(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(function(t,n){if("function"!=typeof n)throw new Error;return function(){Zt(this,t).ease=n}}(n,t)):Jt(this.node(),n).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,n){return function(){var e=n.apply(this,arguments);if("function"!=typeof e)throw new Error;Zt(this,t).ease=e}}(this._id,t))},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise((function(a,o){var u={value:o},s={value:function(){0==--i&&a()}};e.each((function(){var e=Zt(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(u),n._.interrupt.push(u),n._.end.push(s)),e.on=n})),0===i&&a()}))},[Symbol.iterator]:fe[Symbol.iterator]};var de={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function pe(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))throw new Error(`transition ${n} not found`);return e}ft.prototype.interrupt=function(t){return this.each((function(){!function(t,n){var e,r,i,a=t.__transition,o=!0;if(a){for(i in n=null==n?null:n+"",a)(e=a[i]).name===n?(r=e.state>Dt&&e.state<Ht,e.state=Vt,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete a[i]):o=!1;o&&delete t.__transition}}(this,t)}))},ft.prototype.transition=function(t){var n,e;t instanceof le?(n=t._id,t=t._name):(n=he(),(e=de).time=Pt(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,a=0;a<i;++a)for(var o,u=r[a],s=u.length,l=0;l<s;++l)(o=u[l])&&Ut(o,t,n,l,u,e||pe(o,n));return new le(r,this._parents,t,n)};const{abs:_e,max:ye,min:ge}=Math;function me(t){return{type:t}}function ve(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);if(204!==t.status&&205!==t.status)return t.json()}function we(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,a=new Array(i),o=new Array(r);for(e=0;e<i;++e)a[e]=Ae(t[e],n[e]);for(;e<r;++e)o[e]=n[e];return function(t){for(e=0;e<i;++e)o[e]=a[e](t);return o}}function xe(t,n){var e=new Date;return t=+t,n=+n,function(r){return e.setTime(t*(1-r)+n*r),e}}function be(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=Ae(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}}function Me(t,n){n||(n=[]);var e,r=t?Math.min(n.length,t.length):0,i=n.slice();return function(a){for(e=0;e<r;++e)i[e]=t[e]*(1-a)+n[e]*a;return i}}function Ae(t,n){var e,r,i=typeof n;return null==n||"boolean"===i?Yn(n):("number"===i?Kt:"string"===i?(e=En(n))?(n=e,Dn):Vn:n instanceof En?Dn:n instanceof Date?xe:(r=n,!ArrayBuffer.isView(r)||r instanceof DataView?Array.isArray(n)?we:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?be:Kt:Me))(t,n)}function ke(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}["w","e"].map(me),["n","s"].map(me),["n","w","e","s","nw","ne","sw","se"].map(me);const Ne=Symbol("implicit");function Ee(){var t=new Map,n=[],e=[],r=Ne;function i(i){var a=i+"",o=t.get(a);if(!o){if(r!==Ne)return r;t.set(a,o=n.push(i))}return e[(o-1)%e.length]}return i.domain=function(e){if(!arguments.length)return n.slice();n=[],t=new Map;for(const r of e){const e=r+"";t.has(e)||t.set(e,n.push(r))}return i},i.range=function(t){return arguments.length?(e=Array.from(t),i):e.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return Ee(n,e).unknown(r)},ke.apply(i,arguments),i}function Se(){var t,n,e=Ee().unknown(void 0),r=e.domain,i=e.range,a=0,o=1,u=!1,s=0,l=0,c=.5;function h(){var e=r().length,h=o<a,f=h?o:a,d=h?a:o;t=(d-f)/Math.max(1,e-s+2*l),u&&(t=Math.floor(t)),f+=(d-f-t*(e-s))*c,n=t*(1-s),u&&(f=Math.round(f),n=Math.round(n));var p=function(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),a=new Array(i);++r<i;)a[r]=t+r*e;return a}(e).map((function(n){return f+t*n}));return i(h?p.reverse():p)}return delete e.unknown,e.domain=function(t){return arguments.length?(r(t),h()):r()},e.range=function(t){return arguments.length?([a,o]=t,a=+a,o=+o,h()):[a,o]},e.rangeRound=function(t){return[a,o]=t,a=+a,o=+o,u=!0,h()},e.bandwidth=function(){return n},e.step=function(){return t},e.round=function(t){return arguments.length?(u=!!t,h()):u},e.padding=function(t){return arguments.length?(s=Math.min(1,l=+t),h()):s},e.paddingInner=function(t){return arguments.length?(s=Math.min(1,t),h()):s},e.paddingOuter=function(t){return arguments.length?(l=+t,h()):l},e.align=function(t){return arguments.length?(c=Math.max(0,Math.min(1,t)),h()):c},e.copy=function(){return Se(r(),[a,o]).round(u).paddingInner(s).paddingOuter(l).align(c)},ke.apply(h(),arguments)}function $e(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function Pe(t){let n=t,e=t;function r(t,n,r,i){for(null==r&&(r=0),null==i&&(i=t.length);r<i;){const a=r+i>>>1;e(t[a],n)<0?r=a+1:i=a}return r}return 1===t.length&&(n=(n,e)=>t(n)-e,e=function(t){return(n,e)=>$e(t(n),e)}(t)),{left:r,center:function(t,e,i,a){null==i&&(i=0),null==a&&(a=t.length);const o=r(t,e,i,a-1);return o>i&&n(t[o-1],e)>-n(t[o],e)?o-1:o},right:function(t,n,r,i){for(null==r&&(r=0),null==i&&(i=t.length);r<i;){const a=r+i>>>1;e(t[a],n)>0?i=a:r=a+1}return r}}}const Te=Pe($e),Re=Te.right,Ce=(Te.left,Pe((function(t){return null===t?NaN:+t})).center,Re);function Ie(t,n){return t=+t,n=+n,function(e){return Math.round(t*(1-e)+n*e)}}function ze(t){return+t}var Xe=[0,1];function qe(t){return t}function Le(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:(e=isNaN(n)?NaN:.5,function(){return e});var e}function Oe(t,n,e){var r=t[0],i=t[1],a=n[0],o=n[1];return i<r?(r=Le(i,r),a=e(o,a)):(r=Le(r,i),a=e(a,o)),function(t){return a(r(t))}}function Ye(t,n,e){var r=Math.min(t.length,n.length)-1,i=new Array(r),a=new Array(r),o=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++o<r;)i[o]=Le(t[o],t[o+1]),a[o]=e(n[o],n[o+1]);return function(n){var e=Ce(t,n,1,r)-1;return a[e](i[e](n))}}function je(){var t,n,e,r,i,a,o=Xe,u=Xe,s=Ae,l=qe;function c(){var t,n,e,s=Math.min(o.length,u.length);return l!==qe&&(t=o[0],n=o[s-1],t>n&&(e=t,t=n,n=e),l=function(e){return Math.max(t,Math.min(n,e))}),r=s>2?Ye:Oe,i=a=null,h}function h(n){return null==n||isNaN(n=+n)?e:(i||(i=r(o.map(t),u,s)))(t(l(n)))}return h.invert=function(e){return l(n((a||(a=r(u,o.map(t),Kt)))(e)))},h.domain=function(t){return arguments.length?(o=Array.from(t,ze),c()):o.slice()},h.range=function(t){return arguments.length?(u=Array.from(t),c()):u.slice()},h.rangeRound=function(t){return u=Array.from(t),s=Ie,c()},h.clamp=function(t){return arguments.length?(l=!!t||qe,c()):l!==qe},h.interpolate=function(t){return arguments.length?(s=t,c()):s},h.unknown=function(t){return arguments.length?(e=t,h):e},function(e,r){return t=e,n=r,c()}}var De=Math.sqrt(50),Be=Math.sqrt(10),Fe=Math.sqrt(2);function He(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),a=r/Math.pow(10,i);return i>=0?(a>=De?10:a>=Be?5:a>=Fe?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(a>=De?10:a>=Be?5:a>=Fe?2:1)}var Ve,Ue=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Ge(t){if(!(n=Ue.exec(t)))throw new Error("invalid format: "+t);var n;return new Ze({fill:n[1],align:n[2],sign:n[3],symbol:n[4],zero:n[5],width:n[6],comma:n[7],precision:n[8]&&n[8].slice(1),trim:n[9],type:n[10]})}function Ze(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function Je(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]}function Ke(t){return(t=Je(Math.abs(t)))?t[1]:NaN}function Qe(t,n){var e=Je(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}Ge.prototype=Ze.prototype,Ze.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};const We={"%":(t,n)=>(100*t).toFixed(n),b:t=>Math.round(t).toString(2),c:t=>t+"",d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:(t,n)=>t.toExponential(n),f:(t,n)=>t.toFixed(n),g:(t,n)=>t.toPrecision(n),o:t=>Math.round(t).toString(8),p:(t,n)=>Qe(100*t,n),r:Qe,s:function(t,n){var e=Je(t,n);if(!e)return t+"";var r=e[0],i=e[1],a=i-(Ve=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,o=r.length;return a===o?r:a>o?r+new Array(a-o+1).join("0"):a>0?r.slice(0,a)+"."+r.slice(a):"0."+new Array(1-a).join("0")+Je(t,Math.max(0,n+a-1))[0]},X:t=>Math.round(t).toString(16).toUpperCase(),x:t=>Math.round(t).toString(16)};function tr(t){return t}var nr,er,rr,ir=Array.prototype.map,ar=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function or(t){var n=t.domain;return t.ticks=function(t){var e=n();return function(t,n,e){var r,i,a,o,u=-1;if(e=+e,(t=+t)==(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(o=He(t,n,e))||!isFinite(o))return[];if(o>0){let e=Math.round(t/o),r=Math.round(n/o);for(e*o<t&&++e,r*o>n&&--r,a=new Array(i=r-e+1);++u<i;)a[u]=(e+u)*o}else{o=-o;let e=Math.round(t*o),r=Math.round(n*o);for(e/o<t&&++e,r/o>n&&--r,a=new Array(i=r-e+1);++u<i;)a[u]=(e+u)/o}return r&&a.reverse(),a}(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){var r=n();return function(t,n,e,r){var i,a=function(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),a=r/i;return a>=De?i*=10:a>=Be?i*=5:a>=Fe&&(i*=2),n<t?-i:i}(t,n,e);switch((r=Ge(null==r?",f":r)).type){case"s":var o=Math.max(Math.abs(t),Math.abs(n));return null!=r.precision||isNaN(i=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Ke(n)/3)))-Ke(Math.abs(t)))}(a,o))||(r.precision=i),rr(r,o);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,Ke(n)-Ke(t))+1}(a,Math.max(Math.abs(t),Math.abs(n))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-Ke(Math.abs(t)))}(a))||(r.precision=i-2*("%"===r.type))}return er(r)}(r[0],r[r.length-1],null==t?10:t,e)},t.nice=function(e){null==e&&(e=10);var r,i,a=n(),o=0,u=a.length-1,s=a[o],l=a[u],c=10;for(l<s&&(i=s,s=l,l=i,i=o,o=u,u=i);c-- >0;){if((i=He(s,l,e))===r)return a[o]=s,a[u]=l,n(a);if(i>0)s=Math.floor(s/i)*i,l=Math.ceil(l/i)*i;else{if(!(i<0))break;s=Math.ceil(s*i)/i,l=Math.floor(l*i)/i}r=i}return t},t}function ur(t){return Math.sign(t)*t*t}function sr(){var t,n=je()(qe,qe),e=[0,1],r=!1;function i(e){var i=function(t){return Math.sign(t)*Math.sqrt(Math.abs(t))}(n(e));return isNaN(i)?t:r?Math.round(i):i}return i.invert=function(t){return n.invert(ur(t))},i.domain=function(t){return arguments.length?(n.domain(t),i):n.domain()},i.range=function(t){return arguments.length?(n.range((e=Array.from(t,ze)).map(ur)),i):e.slice()},i.rangeRound=function(t){return i.range(t).round(!0)},i.round=function(t){return arguments.length?(r=!!t,i):r},i.clamp=function(t){return arguments.length?(n.clamp(t),i):n.clamp()},i.unknown=function(n){return arguments.length?(t=n,i):t},i.copy=function(){return sr(n.domain(),e).round(r).clamp(n.clamp()).unknown(t)},ke.apply(i,arguments),or(i)}function lr(t){return"string"==typeof t?new ct([[document.querySelector(t)]],[document.documentElement]):new ct([[t]],lt)}nr=function(t){var n,e,r=void 0===t.grouping||void 0===t.thousands?tr:(n=ir.call(t.grouping,Number),e=t.thousands+"",function(t,r){for(var i=t.length,a=[],o=0,u=n[0],s=0;i>0&&u>0&&(s+u+1>r&&(u=Math.max(1,r-s)),a.push(t.substring(i-=u,i+u)),!((s+=u+1)>r));)u=n[o=(o+1)%n.length];return a.reverse().join(e)}),i=void 0===t.currency?"":t.currency[0]+"",a=void 0===t.currency?"":t.currency[1]+"",o=void 0===t.decimal?".":t.decimal+"",u=void 0===t.numerals?tr:function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(ir.call(t.numerals,String)),s=void 0===t.percent?"%":t.percent+"",l=void 0===t.minus?"−":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function h(t){var n=(t=Ge(t)).fill,e=t.align,h=t.sign,f=t.symbol,d=t.zero,p=t.width,_=t.comma,y=t.precision,g=t.trim,m=t.type;"n"===m?(_=!0,m="g"):We[m]||(void 0===y&&(y=12),g=!0,m="g"),(d||"0"===n&&"="===e)&&(d=!0,n="0",e="=");var v="$"===f?i:"#"===f&&/[boxX]/.test(m)?"0"+m.toLowerCase():"",w="$"===f?a:/[%p]/.test(m)?s:"",x=We[m],b=/[defgprs%]/.test(m);function M(t){var i,a,s,f=v,M=w;if("c"===m)M=x(t)+M,t="";else{var A=(t=+t)<0||1/t<0;if(t=isNaN(t)?c:x(Math.abs(t),y),g&&(t=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(n+1):t}(t)),A&&0==+t&&"+"!==h&&(A=!1),f=(A?"("===h?h:l:"-"===h||"("===h?"":h)+f,M=("s"===m?ar[8+Ve/3]:"")+M+(A&&"("===h?")":""),b)for(i=-1,a=t.length;++i<a;)if(48>(s=t.charCodeAt(i))||s>57){M=(46===s?o+t.slice(i+1):t.slice(i))+M,t=t.slice(0,i);break}}_&&!d&&(t=r(t,1/0));var k=f.length+t.length+M.length,N=k<p?new Array(p-k+1).join(n):"";switch(_&&d&&(t=r(N+t,N.length?p-M.length:1/0),N=""),e){case"<":t=f+t+M+N;break;case"=":t=f+N+t+M;break;case"^":t=N.slice(0,k=N.length>>1)+f+t+M+N.slice(k);break;default:t=N+f+t+M}return u(t)}return y=void 0===y?6:/[gprs]/.test(m)?Math.max(1,Math.min(21,y)):Math.max(0,Math.min(20,y)),M.toString=function(){return t+""},M}return{format:h,formatPrefix:function(t,n){var e=h(((t=Ge(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Ke(n)/3))),i=Math.pow(10,-r),a=ar[8+r/3];return function(t){return e(i*t)+a}}}}({thousands:",",grouping:[3],currency:["$",""]}),er=nr.format,rr=nr.formatPrefix;const cr=Math.PI,hr=2*cr,fr=1e-6,dr=hr-fr;function pr(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function _r(){return new pr}pr.prototype=_r.prototype={constructor:pr,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,a){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+a)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var a=this._x1,o=this._y1,u=e-t,s=r-n,l=a-t,c=o-n,h=l*l+c*c;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(h>fr)if(Math.abs(c*u-s*l)>fr&&i){var f=e-a,d=r-o,p=u*u+s*s,_=f*f+d*d,y=Math.sqrt(p),g=Math.sqrt(h),m=i*Math.tan((cr-Math.acos((p+h-_)/(2*y*g)))/2),v=m/g,w=m/y;Math.abs(v-1)>fr&&(this._+="L"+(t+v*l)+","+(n+v*c)),this._+="A"+i+","+i+",0,0,"+ +(c*f>l*d)+","+(this._x1=t+w*u)+","+(this._y1=n+w*s)}else this._+="L"+(this._x1=t)+","+(this._y1=n)},arc:function(t,n,e,r,i,a){t=+t,n=+n,a=!!a;var o=(e=+e)*Math.cos(r),u=e*Math.sin(r),s=t+o,l=n+u,c=1^a,h=a?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+s+","+l:(Math.abs(this._x1-s)>fr||Math.abs(this._y1-l)>fr)&&(this._+="L"+s+","+l),e&&(h<0&&(h=h%hr+hr),h>dr?this._+="A"+e+","+e+",0,1,"+c+","+(t-o)+","+(n-u)+"A"+e+","+e+",0,1,"+c+","+(this._x1=s)+","+(this._y1=l):h>fr&&(this._+="A"+e+","+e+",0,"+ +(h>=cr)+","+c+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};const yr=_r;function gr(t){return function(){return t}}var mr=Math.abs,vr=Math.atan2,wr=Math.cos,xr=Math.max,br=Math.min,Mr=Math.sin,Ar=Math.sqrt,kr=1e-12,Nr=Math.PI,Er=Nr/2,Sr=2*Nr;function $r(t){return t>=1?Er:t<=-1?-Er:Math.asin(t)}function Pr(t){return t.innerRadius}function Tr(t){return t.outerRadius}function Rr(t){return t.startAngle}function Cr(t){return t.endAngle}function Ir(t){return t&&t.padAngle}function zr(t,n,e,r,i,a,o){var u=t-e,s=n-r,l=(o?a:-a)/Ar(u*u+s*s),c=l*s,h=-l*u,f=t+c,d=n+h,p=e+c,_=r+h,y=(f+p)/2,g=(d+_)/2,m=p-f,v=_-d,w=m*m+v*v,x=i-a,b=f*_-p*d,M=(v<0?-1:1)*Ar(xr(0,x*x*w-b*b)),A=(b*v-m*M)/w,k=(-b*m-v*M)/w,N=(b*v+m*M)/w,E=(-b*m+v*M)/w,S=A-y,$=k-g,P=N-y,T=E-g;return S*S+$*$>P*P+T*T&&(A=N,k=E),{cx:A,cy:k,x01:-c,y01:-h,x11:A*(i/x-1),y11:k*(i/x-1)}}function Xr(){var t=Pr,n=Tr,e=gr(0),r=null,i=Rr,a=Cr,o=Ir,u=null;function s(){var s,l,c,h=+t.apply(this,arguments),f=+n.apply(this,arguments),d=i.apply(this,arguments)-Er,p=a.apply(this,arguments)-Er,_=mr(p-d),y=p>d;if(u||(u=s=yr()),f<h&&(l=f,f=h,h=l),f>kr)if(_>Sr-kr)u.moveTo(f*wr(d),f*Mr(d)),u.arc(0,0,f,d,p,!y),h>kr&&(u.moveTo(h*wr(p),h*Mr(p)),u.arc(0,0,h,p,d,y));else{var g,m,v=d,w=p,x=d,b=p,M=_,A=_,k=o.apply(this,arguments)/2,N=k>kr&&(r?+r.apply(this,arguments):Ar(h*h+f*f)),E=br(mr(f-h)/2,+e.apply(this,arguments)),S=E,$=E;if(N>kr){var P=$r(N/h*Mr(k)),T=$r(N/f*Mr(k));(M-=2*P)>kr?(x+=P*=y?1:-1,b-=P):(M=0,x=b=(d+p)/2),(A-=2*T)>kr?(v+=T*=y?1:-1,w-=T):(A=0,v=w=(d+p)/2)}var R=f*wr(v),C=f*Mr(v),I=h*wr(b),z=h*Mr(b);if(E>kr){var X,q=f*wr(w),L=f*Mr(w),O=h*wr(x),Y=h*Mr(x);if(_<Nr&&(X=function(t,n,e,r,i,a,o,u){var s=e-t,l=r-n,c=o-i,h=u-a,f=h*s-c*l;if(!(f*f<kr))return[t+(f=(c*(n-a)-h*(t-i))/f)*s,n+f*l]}(R,C,O,Y,q,L,I,z))){var j=R-X[0],D=C-X[1],B=q-X[0],F=L-X[1],H=1/Mr(((c=(j*B+D*F)/(Ar(j*j+D*D)*Ar(B*B+F*F)))>1?0:c<-1?Nr:Math.acos(c))/2),V=Ar(X[0]*X[0]+X[1]*X[1]);S=br(E,(h-V)/(H-1)),$=br(E,(f-V)/(H+1))}}A>kr?$>kr?(g=zr(O,Y,R,C,f,$,y),m=zr(q,L,I,z,f,$,y),u.moveTo(g.cx+g.x01,g.cy+g.y01),$<E?u.arc(g.cx,g.cy,$,vr(g.y01,g.x01),vr(m.y01,m.x01),!y):(u.arc(g.cx,g.cy,$,vr(g.y01,g.x01),vr(g.y11,g.x11),!y),u.arc(0,0,f,vr(g.cy+g.y11,g.cx+g.x11),vr(m.cy+m.y11,m.cx+m.x11),!y),u.arc(m.cx,m.cy,$,vr(m.y11,m.x11),vr(m.y01,m.x01),!y))):(u.moveTo(R,C),u.arc(0,0,f,v,w,!y)):u.moveTo(R,C),h>kr&&M>kr?S>kr?(g=zr(I,z,q,L,h,-S,y),m=zr(R,C,O,Y,h,-S,y),u.lineTo(g.cx+g.x01,g.cy+g.y01),S<E?u.arc(g.cx,g.cy,S,vr(g.y01,g.x01),vr(m.y01,m.x01),!y):(u.arc(g.cx,g.cy,S,vr(g.y01,g.x01),vr(g.y11,g.x11),!y),u.arc(0,0,h,vr(g.cy+g.y11,g.cx+g.x11),vr(m.cy+m.y11,m.cx+m.x11),y),u.arc(m.cx,m.cy,S,vr(m.y11,m.x11),vr(m.y01,m.x01),!y))):u.arc(0,0,h,b,x,y):u.lineTo(I,z)}else u.moveTo(0,0);if(u.closePath(),s)return u=null,s+""||null}return s.centroid=function(){var e=(+t.apply(this,arguments)+ +n.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +a.apply(this,arguments))/2-Nr/2;return[wr(r)*e,Mr(r)*e]},s.innerRadius=function(n){return arguments.length?(t="function"==typeof n?n:gr(+n),s):t},s.outerRadius=function(t){return arguments.length?(n="function"==typeof t?t:gr(+t),s):n},s.cornerRadius=function(t){return arguments.length?(e="function"==typeof t?t:gr(+t),s):e},s.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:gr(+t),s):r},s.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:gr(+t),s):i},s.endAngle=function(t){return arguments.length?(a="function"==typeof t?t:gr(+t),s):a},s.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:gr(+t),s):o},s.context=function(t){return arguments.length?(u=null==t?null:t,s):u},s}function qr(t,n){return n<t?-1:n>t?1:n>=t?0:NaN}function Lr(t){return t}function Or(){var t=Lr,n=qr,e=null,r=gr(0),i=gr(Sr),a=gr(0);function o(o){var u,s,l,c,h,f,d=(f=o,o="object"==typeof f&&"length"in f?f:Array.from(f)).length,p=0,_=new Array(d),y=new Array(d),g=+r.apply(this,arguments),m=Math.min(Sr,Math.max(-Sr,i.apply(this,arguments)-g)),v=Math.min(Math.abs(m)/d,a.apply(this,arguments)),w=v*(m<0?-1:1);for(u=0;u<d;++u)(h=y[_[u]=u]=+t(o[u],u,o))>0&&(p+=h);for(null!=n?_.sort((function(t,e){return n(y[t],y[e])})):null!=e&&_.sort((function(t,n){return e(o[t],o[n])})),u=0,l=p?(m-d*w)/p:0;u<d;++u,g=c)s=_[u],c=g+((h=y[s])>0?h*l:0)+w,y[s]={data:o[s],index:u,value:h,startAngle:g,endAngle:c,padAngle:v};return y}return o.value=function(n){return arguments.length?(t="function"==typeof n?n:gr(+n),o):t},o.sortValues=function(t){return arguments.length?(n=t,e=null,o):n},o.sort=function(t){return arguments.length?(e=t,n=null,o):e},o.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:gr(+t),o):r},o.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:gr(+t),o):i},o.padAngle=function(t){return arguments.length?(a="function"==typeof t?t:gr(+t),o):a},o}function Yr(t,n,e){this.k=t,this.x=n,this.y=e}Array.prototype.slice,Yr.prototype={constructor:Yr,scale:function(t){return 1===t?this:new Yr(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new Yr(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}},new Yr(1,0,0),Yr.prototype;const jr="data/data.json",Dr=720,Br=720,Fr=Math.min(Dr,Br)/2,Hr=lr("#chart-area").append("svg").attr("width",720).attr("height",720).append("g").attr("transform","translate(360, 360)"),Vr=lr("#chart-area").append("div").attr("class","tooltip").style("opacity",0).style("background-color","white").style("border","solid").style("border-width","2px").style("border-radius","5px").style("padding","5px").style("width","300px").style("position","absolute");let Ur,Gr,Zr,Jr,Kr,Qr,Wr,ti,ni,ei=(t,n)=>{Vr.transition().duration(300).style("display",null).style("opacity",.9).style("font","12px sans-serif"),lr(t.currentTarget).style("stroke-width","3px")},ri=(t,n)=>{Vr.transition().duration(100).style("display","none"),lr(t.currentTarget).style("stroke-width","1px")};class ii{constructor({_perspective:t,_data_raw:n,_boundary_fill:e,_font_fill:r,_font_size:i,_font_family:a,_letter_spacing:o}){this.perspective=t,this.data_raw=n,this.boundary_fill=e,this.font_fill=r,this.font_size=i,this.font_family=a,this.letter_spacing=o,this.init_vis()}init_vis(){const t=this;var n;t.tooltip_offset_event_pageX=0,t.tooltip_translateX=-50,t.tooltip_offset_event_pageY=-385,"inside"==t.perspective?(t.data=t.data_raw[0],t.text=t.data.name,t.description=t.data.description,t.inner_radius=182,t.outer_radius=202):"middle"==t.perspective?(t.data=t.data_raw[1],t.text=t.data.name,t.description=t.data.description,t.inner_radius=202,t.outer_radius=258):"outside"==t.perspective&&(t.data=t.data_raw[2],t.text=t.data.name,t.description=t.data.description,t.inner_radius=258,t.outer_radius=278),t.mousemove=function(n,e){Vr.style("left","50%").style("transform",`translateX(${t.tooltip_translateX}%)`).style("top",n.pageY+t.tooltip_offset_event_pageY+"px").html(`${t.description}`)},t.middle_radius=(t.inner_radius+t.outer_radius)/2,t.startAngle=90*Math.PI/180,t.endAngle=90*Math.PI/180+2*Math.PI,t.text=t.text.trim().toLowerCase(),t.text_for_id=t.text.replace(/\s+/g,""),t.arc_shape=Xr().innerRadius(t.inner_radius).outerRadius(t.outer_radius).startAngle(t.startAngle).endAngle(t.endAngle),t.arc_text=Xr().innerRadius(t.middle_radius).outerRadius(t.middle_radius).startAngle(t.startAngle).endAngle(t.endAngle),t.g=Hr.append("g").attr("class",`boundary_${t.perspective}`),t.g.append("defs").append("path").attr("id",`arc_boundary_${t.text_for_id}_text`).attr("d",(n=t.arc_text(1)).replace(/(M.*A.*)(A.*Z)/,(function(t,e){return e||n}))),t.g.append("path").attr("id",`arc_boundary_${t.text_for_id}_shape`).attr("d",t.arc_shape(1)).attr("fill",t.boundary_fill).style("stroke","yellow").style("stroke-width","1px").on("mouseover",ei).on("mousemove",t.mousemove).on("mouseleave",ri),t.g.append("clipPath").attr("id",`arc_boundary_${t.text_for_id}_text_clip`).append("use").attr("xlink:href",`#arc_boundary_${t.text_for_id}_shape`),t.g.append("text").attr("dy",4).attr("clip-path",`url(#arc_boundary_${t.text_for_id}_text_clip)`).append("textPath").attr("xlink:href",`#arc_boundary_${t.text_for_id}_text`).attr("startOffset","50%").style("text-anchor","middle").style("fill",t.font_fill).style("font-size",`${t.font_size}px`).style("font-family",t.font_family).style("letter-spacing",`${t.letter_spacing}px`).text(t.text)}}class ai{constructor({_perspective:t,_data_raw:n,_data_inside_array:e}){this.perspective=t,this.data_raw=n,this.data_inside_array=e,this.init_vis()}init_vis(){const t=this;t.tooltip_offset_event_pageX=0,t.tooltip_translateX=-50,t.tooltip_offset_event_pageY=-385,"inside"==t.perspective?(t.radius_inner=180,t.radius_outer=0,t.radius_gradient=t.radius_inner,t.color_bar_0="#FAA0A0",t.color_bar_100="white",t.offset_0=80,t.color_stroke="#FA8072",t.domain_y_min=5,t.domain_y_max=100):"outside"==t.perspective&&(t.radius_inner=280,t.radius_outer=Fr,t.radius_gradient=t.radius_outer,t.color_bar_0="white",t.color_bar_100="#FAA0A0",t.offset_0=70,t.color_stroke="#FA8072",t.domain_y_min=.25,t.domain_y_max=4),t.x_scale=Se().range([0,2*Math.PI]).align(0),t.y_scale=sr().range([t.radius_inner,t.radius_outer]).domain([0,t.domain_y_max]),t.arc=Xr().innerRadius(t.radius_inner).padRadius(t.radius_inner),t.pie=Or().padAngle(.01).sort(null),t.g=Hr.append("g").attr("class",`bar_${t.perspective}`),t.defs=t.g.append("svg:defs"),t.radial_gradient=t.defs.append("radialGradient").attr("gradientUnits","userSpaceOnUse").attr("cx","50%").attr("cy","50%").attr("r",t.radius_gradient).attr("gradientTransform","translate(-360, -360)").attr("id",`bar_${t.perspective}_id`),t.radial_gradient.append("stop").attr("offset",`${t.offset_0}%`).style("stop-color",t.color_bar_0),t.radial_gradient.append("stop").attr("offset","100%").style("stop-color",t.color_bar_100),t.wrangle_data()}wrangle_data(){const t=this;t.selected_option=$("#country-dropdown").val(),t.selected_option_text=$("#country-dropdown option:selected").text(),t.country_id_index=t.data_inside_array.indexOf(t.selected_option),"inside"==t.perspective?(t.data=t.data_raw[0].data[t.country_id_index].metric,t.mousemove=function(n,e){Vr.style("left","50%").style("transform",`translateX(${t.tooltip_translateX}%)`).style("top",n.pageY+t.tooltip_offset_event_pageY+"px").html(`\n                        <strong>${e.data.metric_category} - ${e.data.metric_name}</strong>\n                        <br><i><sub>${t.selected_option_text}</sub></i>\n\n                        <br><br>${e.data.metric_description}\n                        <br><br>Display value: <b>${oi(e.data.metric_value_display)}%</b>\n\n                        <br><br><u>Source</u>\n                        <br>Actual value: ${oi(e.data.metric_value_current)}\n                        <br>Year: ${e.data.metric_year}\n                        <br>Credit: ${e.data.metric_source}\n                        <br>Metric ID: ${e.data.metric_id}\n                    `)}):"outside"==t.perspective&&(t.data=t.data_raw[2].data[t.country_id_index].metric,t.mousemove=function(n,e){Vr.style("left","50%").style("transform",`translateX(${t.tooltip_translateX}%)`).style("top",n.pageY+t.tooltip_offset_event_pageY+"px").html(`\n                        <strong>${e.data.metric_name}</strong>\n                        <br><i><sub>${t.selected_option_text}</sub></i>\n\n                        <br><br>${e.data.metric_description}\n                        <br><br>Normalized value (value of 1 represents the boundary): <b>${oi(e.data.metric_value_display)}</b> (ideal is <1)\n                        \n                        <br><br><u>Source</u>\n                        <br>Year: ${e.data.metric_year}\n                        <br>Credit: ${e.data.metric_source}\n                        <br>Metric ID: ${e.data.metric_id}\n                    `)}),t.x_scale.domain(t.data.map((t=>t.metric_name))),t.update_vis()}update_vis(){const t=this;t.transition_duration=ce().duration(1e3),t.bar=t.g.selectAll(`path.bar_${t.perspective}_path`).data(t.pie(t.data)),t.bar.enter().append("path").attr("class",`bar_${t.perspective}_path`).attr("d",t.arc.startAngle((n=>t.x_scale(n.data.metric_name))).endAngle((n=>t.x_scale(n.data.metric_name)+t.x_scale.bandwidth())).outerRadius((function(n){let e=n.data.metric_value_display;return n.data.metric_value_display>t.domain_y_max?e=t.domain_y_max:null===n.data.metric_value_display?e=0:n.data.metric_value_display<=t.domain_y_min&&(e=t.domain_y_min),t.y_scale(e)}))).style("fill",`url(#bar_${t.perspective}_id)`).style("stroke",t.color_stroke).style("stroke-width","1px").on("mouseover",ei).on("mousemove",t.mousemove).on("mouseleave",ri),t.bar.exit().transition(t.transition_duration).attrTween("d",t.arc_tween).remove(),t.bar.transition(t.transition_duration).attrTween("d",t.arc_tween),t.arc_tween=n=>{const e=Ae(this._current,n);return this._current=e(1),n=>t.arc(e(n))}}}function oi(t){let n;return n=null!==t?t.toFixed(2):t,n}class ui{constructor({_data_raw:t,_font_fill:n,_font_size:e,_font_family:r,_letter_spacing:i}){this.data_raw=t,this.font_fill=n,this.font_size=e,this.font_family=r,this.letter_spacing=i,this.init_vis()}init_vis(){const t=this;t.padding=20,t.arc=Xr().innerRadius(180-t.padding).outerRadius(180),t.pie=Or().startAngle(0).endAngle(2*Math.PI).value((function(t){return 3})).padAngle(.01).sort(null),t.g=Hr.append("g").attr("class","label_inside"),t.wrangle_data()}wrangle_data(){const t=this;t.data=t.data_raw[0].data[0].metric,t.update_vis()}update_vis(){const t=this;t.g.selectAll(".arc_inside").data(t.pie(t.data)).enter(),t.pie(t.data).forEach((function(n,e){[t.x,t.y]=t.arc.centroid(n);let r=n.data.metric_name.trim().toLowerCase(),i=n.endAngle,a=i<=Math.PI?180*(n.startAngle/2+n.endAngle/2)/Math.PI:180*(n.startAngle/2+n.endAngle/2+Math.PI)/Math.PI,o=i<=Math.PI?"end":"start",u="translate("+[t.x,t.y]+") rotate(-90) rotate("+a+")";t.g.append("text").attr("text-anchor",o).attr("transform",u).style("z-index","1").style("font-size",`${t.font_size}px`).style("font-family",t.font_family).style("fill",t.font_fill).style("letter-spacing",`${t.letter_spacing}px`).text(r)}))}}class si{constructor({_data_raw:t,_font_fill:n,_font_size:e,_font_family:r,_letter_spacing:i}){this.data_raw=t,this.font_fill=n,this.font_size=e,this.font_family=r,this.letter_spacing=i,this.init_vis()}init_vis(){const t=this;t.arc=Xr().innerRadius(182).outerRadius(278),t.pie=Or().startAngle(0).endAngle(2*Math.PI).value((function(t){return 3})).padAngle(.01).sort(null),t.g=Hr.append("g").attr("class","label_outside"),t.wrangle_data()}wrangle_data(){const t=this;t.data=t.data_raw[2].data[0].metric,t.update_vis()}update_vis(){const t=this;t.reviseArc=function(n,e){t.firstArcSection=/(^.+?)L/,t.thisSection=lr(this).attr("d"),t.newArc=t.firstArcSection.exec(t.thisSection)[1],t.newArc=t.newArc.replace(/,/g," "),n.endAngle>.75*Math.PI&&n.endAngle<1.5*Math.PI&&(t.locStart=/M(.*?)A/,t.locMiddle=/A(.*?)0 0 1/,t.locEnd=/0 0 1 (.*?)$/,t.newStart=t.locEnd.exec(t.newArc)[1],t.newEnd=t.locStart.exec(t.newArc)[1],t.middleSec=t.locMiddle.exec(t.newArc)[1],t.newArc="M"+t.newStart+"A"+t.middleSec+"0 0 0 "+t.newEnd),t.g.append("path").attr("class","hiddenDonutArcs").attr("id","donutArc"+e).attr("d",t.newArc).style("fill","none")},t.g.selectAll(".donutArcSlices").data(t.pie(t.data)).enter().append("path").attr("class","donutArcSlices").attr("d",t.arc).attr("fill","none").each(t.reviseArc),t.g.selectAll(".donutText").data(t.pie(t.data)).enter().append("text").attr("class","donutText").style("fill","black").attr("dy",(function(t,n){return t.endAngle>.75*Math.PI&&t.endAngle<1.5*Math.PI?25:-18})).append("textPath").attr("startOffset","50%").style("z-index","1").style("text-anchor","middle").attr("xlink:href",(function(t,n){return"#donutArc"+n})).style("font-size",`${t.font_size}px`).style("font-family",t.font_family).style("fill",t.font_fill).style("letter-spacing",`${t.letter_spacing}px`).text((function(t){return t.data.metric_name.toLowerCase()}))}}var li;!function(t,n){let e=document.getElementById("country-dropdown"),r=document.createElement("option");r.text="Choose a country",r.disabled=!0,e.add(r);const i=new XMLHttpRequest;i.open("GET",n,!0),i.onload=function(){if(200===i.status){const t=JSON.parse(i.responseText)[0].data;let n;for(let r=0;r<t.length;r++){let i=t[r].country_name,a=t[r].country_id;n=document.createElement("option"),n.text=i,n.value=a,"ALB"==a&&(n.selected=!0),e.add(n)}}},i.onerror=function(){console.error("An error occurred fetching the JSON from "+n)},i.send()}(0,jr),(li=jr,fetch(li,void 0).then(ve)).then((t=>{Ur=t,Gr=Ur[0].data.map((t=>t.country_id)),Zr=new ai({_perspective:"inside",_data_raw:Ur,_data_inside_array:Gr}),Jr=new ai({_perspective:"outside",_data_raw:Ur,_data_inside_array:Gr}),Kr=new ui({_data_raw:Ur,_font_fill:"#008080",_font_size:13,_font_family:"Gill Sans",_letter_spacing:0}),Qr=new si({_data_raw:Ur,_font_fill:"#008080",_font_size:15,_font_family:"Optima",_letter_spacing:0}),Wr=new ii({_perspective:"inside",_data_raw:Ur,_boundary_fill:"#017241",_font_fill:"white",_font_size:12,_font_family:"Lucida Console",_letter_spacing:1}),ti=new ii({_perspective:"middle",_data_raw:Ur,_boundary_fill:"#6FB646",_font_fill:"white",_font_size:25,_font_family:"Bradley Hand",_letter_spacing:4}),ni=new ii({_perspective:"outside",_data_raw:Ur,_boundary_fill:"#017241",_font_fill:"white",_font_size:12,_font_family:"Lucida Console",_letter_spacing:1})})),$("#country-dropdown").on("change",(function(){Zr.wrangle_data(),Jr.wrangle_data()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,